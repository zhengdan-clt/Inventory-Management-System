<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pn.mapper.RoleMapper">

    <!--
      //查询状态正常的所有角色的方法
      public List<Role> findAllRole()
    -->
    <select id="findAllRole" resultType="com.pn.entity.Role">
        select role_id, role_name from role where role_state = 1
    </select>

    <!--
      //根据用户id查询用户已分配的角色
      public List<Role> findRolesByUserId(Integer userId)
    -->
    <select id="findRolesByUserId" resultType="com.pn.entity.Role">
        select t2.* from user_role t1, role t2
        where t1.role_id = t2.role_id
        and t1.user_id = #{userId}
    </select>

    <!--
      //根据用户id删除给用户已分配的所有角色
      public int delRoleByUserId(Integer userId);
    -->
    <delete id="delRoleByUserId">
        delete from user_role where user_id = #{userId}
    </delete>

    <!--
      //根据角色名称查询角色id
      public int getRoleIdByName(String roleName);
    -->
    <select id="getRoleIdByName" resultType="integer">
        select role_id from role where role_name = #{roleName}
    </select>

    <!--
      //添加用户角色关系的方法
      public void insertUserRole(Integer userId, Integer roleId)
    -->
    <insert id="insertUserRole">
        insert into user_role (user_id, role_id)
        values (#{param1}, #{param2})
    </insert>

    <!--
      //查询角色总行数的方法
      public int selectRoleCount(Role role);
    -->
    <select id="selectRoleCount" resultType="integer">
        select count(*) from role
        <where>
            <if test="roleName != null and roleName != ''">
                and role_name like concat('%', #{roleName}, '%')
            </if>
            <if test="roleCode != null and roleCode != ''">
                and role_code like concat('%', #{roleCode}, '%')
            </if>
            <if test="roleState != null and roleState != ''">
                and role_state = #{roleState}
            </if>
        </where>
    </select>
    <!--
      //分页查询角色的方法
      public List<Role> selectRolePage(@Param("page") Page page, @Param("role") Role role);
    -->
    <select id="selectRolePage" resultType="com.pn.entity.Role">
        select t1.*, t2.user_code getCode from role t1, user_info t2
        <where>
            and t1.create_by = t2.user_id
            <if test="role.roleName != null and role.roleName != ''">
                and t1.role_name like concat('%', #{role.roleName}, '%')
            </if>
            <if test="role.roleCode != null and role.roleCode != ''">
                and t1.role_code like concat('%', #{role.roleCode}, '%')
            </if>
            <if test="role.roleState != null and role.roleState != ''">
                and t1.role_state = #{role.roleState}
            </if>
            limit #{page.limitIndex}, #{page.pageSize}
        </where>
    </select>

    <!--
      //根据角色名称或者角色代码查询角色的方法
      public Role findRoleByNameOrCode(String roleName, String roleCode);
    -->
    <select id="findRoleByNameOrCode" resultType="com.pn.entity.Role">
        select * from role where role_name = #{param1} or role_code = #{param2}
    </select>

    <!--
      //添加角色的方法
      public int insertRole(Role role);
    -->
    <insert id="insertRole">
        insert into role
        (role_name, role_code, role_desc, role_state, create_by, create_time)
        values
        (#{roleName}, #{roleCode}, #{roleDesc}, 0, #{createBy}, now())
    </insert>

    <!--
     //根据角色id修改角色状态的方法
     public int updateRoleState(Role role);
    -->
    <update id="updateRoleState">
        update role set
        role_state = #{roleState}, update_by = #{updateBy}, update_time = #{updateTime}
        where role_id = #{roleId}
    </update>

    <!--
      //根据角色id查询角色已分配的所有权限(菜单)的id
      public List<Integer> findAuthIds(Integer roleId)
    -->
    <select id="findAuthIds" resultType="integer">
        select auth_id from role_auth where role_id = #{roleId}
    </select>

    <!--
      //根据角色id删除角色的方法
      public int deleteRoleById(Integer roleId)
    -->
    <delete id="deleteRoleById">
        delete from role where role_id = #{roleId}
    </delete>

    <!--
      //根据角色id修改角色描述的方法
      public int updateDescById(Role role)
    -->
    <update id="updateDescById">
        update role set
        role_desc = #{roleDesc}, update_by = #{updateBy}, update_time = now()
        where role_id = #{roleId}
    </update>

</mapper>